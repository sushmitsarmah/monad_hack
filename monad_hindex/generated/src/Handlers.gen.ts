/* TypeScript file generated from Handlers.res by genType. */

/* eslint-disable */
/* tslint:disable */

const HandlersJS = require('./Handlers.bs.js');

import type {CHOGTokenMintERC20Token_Approval_contractRegister as Types_CHOGTokenMintERC20Token_Approval_contractRegister} from './Types.gen';

import type {CHOGTokenMintERC20Token_Approval_eventFilter as Types_CHOGTokenMintERC20Token_Approval_eventFilter} from './Types.gen';

import type {CHOGTokenMintERC20Token_Approval_handler as Types_CHOGTokenMintERC20Token_Approval_handler} from './Types.gen';

import type {CHOGTokenMintERC20Token_Approval_loader as Types_CHOGTokenMintERC20Token_Approval_loader} from './Types.gen';

import type {CHOGTokenMintERC20Token_Transfer_contractRegister as Types_CHOGTokenMintERC20Token_Transfer_contractRegister} from './Types.gen';

import type {CHOGTokenMintERC20Token_Transfer_eventFilter as Types_CHOGTokenMintERC20Token_Transfer_eventFilter} from './Types.gen';

import type {CHOGTokenMintERC20Token_Transfer_handler as Types_CHOGTokenMintERC20Token_Transfer_handler} from './Types.gen';

import type {CHOGTokenMintERC20Token_Transfer_loader as Types_CHOGTokenMintERC20Token_Transfer_loader} from './Types.gen';

import type {DAKTokenMintERC20Token_Approval_contractRegister as Types_DAKTokenMintERC20Token_Approval_contractRegister} from './Types.gen';

import type {DAKTokenMintERC20Token_Approval_eventFilter as Types_DAKTokenMintERC20Token_Approval_eventFilter} from './Types.gen';

import type {DAKTokenMintERC20Token_Approval_handler as Types_DAKTokenMintERC20Token_Approval_handler} from './Types.gen';

import type {DAKTokenMintERC20Token_Approval_loader as Types_DAKTokenMintERC20Token_Approval_loader} from './Types.gen';

import type {DAKTokenMintERC20Token_Transfer_contractRegister as Types_DAKTokenMintERC20Token_Transfer_contractRegister} from './Types.gen';

import type {DAKTokenMintERC20Token_Transfer_eventFilter as Types_DAKTokenMintERC20Token_Transfer_eventFilter} from './Types.gen';

import type {DAKTokenMintERC20Token_Transfer_handler as Types_DAKTokenMintERC20Token_Transfer_handler} from './Types.gen';

import type {DAKTokenMintERC20Token_Transfer_loader as Types_DAKTokenMintERC20Token_Transfer_loader} from './Types.gen';

import type {HandlerTypes_eventConfig as Types_HandlerTypes_eventConfig} from './Types.gen';

import type {SingleOrMultiple_t as Types_SingleOrMultiple_t} from './Types.gen';

import type {WETHTokenMintERC20Token_Approval_contractRegister as Types_WETHTokenMintERC20Token_Approval_contractRegister} from './Types.gen';

import type {WETHTokenMintERC20Token_Approval_eventFilter as Types_WETHTokenMintERC20Token_Approval_eventFilter} from './Types.gen';

import type {WETHTokenMintERC20Token_Approval_handler as Types_WETHTokenMintERC20Token_Approval_handler} from './Types.gen';

import type {WETHTokenMintERC20Token_Approval_loader as Types_WETHTokenMintERC20Token_Approval_loader} from './Types.gen';

import type {WETHTokenMintERC20Token_Transfer_contractRegister as Types_WETHTokenMintERC20Token_Transfer_contractRegister} from './Types.gen';

import type {WETHTokenMintERC20Token_Transfer_eventFilter as Types_WETHTokenMintERC20Token_Transfer_eventFilter} from './Types.gen';

import type {WETHTokenMintERC20Token_Transfer_handler as Types_WETHTokenMintERC20Token_Transfer_handler} from './Types.gen';

import type {WETHTokenMintERC20Token_Transfer_loader as Types_WETHTokenMintERC20Token_Transfer_loader} from './Types.gen';

import type {YAKITokenMintERC20Token_Approval_contractRegister as Types_YAKITokenMintERC20Token_Approval_contractRegister} from './Types.gen';

import type {YAKITokenMintERC20Token_Approval_eventFilter as Types_YAKITokenMintERC20Token_Approval_eventFilter} from './Types.gen';

import type {YAKITokenMintERC20Token_Approval_handler as Types_YAKITokenMintERC20Token_Approval_handler} from './Types.gen';

import type {YAKITokenMintERC20Token_Approval_loader as Types_YAKITokenMintERC20Token_Approval_loader} from './Types.gen';

import type {YAKITokenMintERC20Token_Transfer_contractRegister as Types_YAKITokenMintERC20Token_Transfer_contractRegister} from './Types.gen';

import type {YAKITokenMintERC20Token_Transfer_eventFilter as Types_YAKITokenMintERC20Token_Transfer_eventFilter} from './Types.gen';

import type {YAKITokenMintERC20Token_Transfer_handler as Types_YAKITokenMintERC20Token_Transfer_handler} from './Types.gen';

import type {YAKITokenMintERC20Token_Transfer_loader as Types_YAKITokenMintERC20Token_Transfer_loader} from './Types.gen';

import type {fnWithEventConfig as Types_fnWithEventConfig} from './Types.gen';

import type {genericHandlerWithLoader as Internal_genericHandlerWithLoader} from 'envio/src/Internal.gen';

export const CHOGTokenMintERC20Token_Approval_handler: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Approval_eventFilter>> = HandlersJS.CHOGTokenMintERC20Token.Approval.handler as any;

export const CHOGTokenMintERC20Token_Approval_contractRegister: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Approval_eventFilter>> = HandlersJS.CHOGTokenMintERC20Token.Approval.contractRegister as any;

export const CHOGTokenMintERC20Token_Approval_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_CHOGTokenMintERC20Token_Approval_loader<loaderReturn>,Types_CHOGTokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_CHOGTokenMintERC20Token_Approval_eventFilter>>) => void = HandlersJS.CHOGTokenMintERC20Token.Approval.handlerWithLoader as any;

export const CHOGTokenMintERC20Token_Transfer_handler: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.CHOGTokenMintERC20Token.Transfer.handler as any;

export const CHOGTokenMintERC20Token_Transfer_contractRegister: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.CHOGTokenMintERC20Token.Transfer.contractRegister as any;

export const CHOGTokenMintERC20Token_Transfer_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_CHOGTokenMintERC20Token_Transfer_loader<loaderReturn>,Types_CHOGTokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_CHOGTokenMintERC20Token_Transfer_eventFilter>>) => void = HandlersJS.CHOGTokenMintERC20Token.Transfer.handlerWithLoader as any;

export const DAKTokenMintERC20Token_Approval_handler: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Approval_eventFilter>> = HandlersJS.DAKTokenMintERC20Token.Approval.handler as any;

export const DAKTokenMintERC20Token_Approval_contractRegister: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Approval_eventFilter>> = HandlersJS.DAKTokenMintERC20Token.Approval.contractRegister as any;

export const DAKTokenMintERC20Token_Approval_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_DAKTokenMintERC20Token_Approval_loader<loaderReturn>,Types_DAKTokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_DAKTokenMintERC20Token_Approval_eventFilter>>) => void = HandlersJS.DAKTokenMintERC20Token.Approval.handlerWithLoader as any;

export const DAKTokenMintERC20Token_Transfer_handler: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.DAKTokenMintERC20Token.Transfer.handler as any;

export const DAKTokenMintERC20Token_Transfer_contractRegister: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.DAKTokenMintERC20Token.Transfer.contractRegister as any;

export const DAKTokenMintERC20Token_Transfer_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_DAKTokenMintERC20Token_Transfer_loader<loaderReturn>,Types_DAKTokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_DAKTokenMintERC20Token_Transfer_eventFilter>>) => void = HandlersJS.DAKTokenMintERC20Token.Transfer.handlerWithLoader as any;

export const WETHTokenMintERC20Token_Approval_handler: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Approval_eventFilter>> = HandlersJS.WETHTokenMintERC20Token.Approval.handler as any;

export const WETHTokenMintERC20Token_Approval_contractRegister: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Approval_eventFilter>> = HandlersJS.WETHTokenMintERC20Token.Approval.contractRegister as any;

export const WETHTokenMintERC20Token_Approval_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_WETHTokenMintERC20Token_Approval_loader<loaderReturn>,Types_WETHTokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_WETHTokenMintERC20Token_Approval_eventFilter>>) => void = HandlersJS.WETHTokenMintERC20Token.Approval.handlerWithLoader as any;

export const WETHTokenMintERC20Token_Transfer_handler: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.WETHTokenMintERC20Token.Transfer.handler as any;

export const WETHTokenMintERC20Token_Transfer_contractRegister: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.WETHTokenMintERC20Token.Transfer.contractRegister as any;

export const WETHTokenMintERC20Token_Transfer_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_WETHTokenMintERC20Token_Transfer_loader<loaderReturn>,Types_WETHTokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_WETHTokenMintERC20Token_Transfer_eventFilter>>) => void = HandlersJS.WETHTokenMintERC20Token.Transfer.handlerWithLoader as any;

export const YAKITokenMintERC20Token_Approval_handler: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Approval_eventFilter>> = HandlersJS.YAKITokenMintERC20Token.Approval.handler as any;

export const YAKITokenMintERC20Token_Approval_contractRegister: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Approval_eventFilter>> = HandlersJS.YAKITokenMintERC20Token.Approval.contractRegister as any;

export const YAKITokenMintERC20Token_Approval_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_YAKITokenMintERC20Token_Approval_loader<loaderReturn>,Types_YAKITokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_YAKITokenMintERC20Token_Approval_eventFilter>>) => void = HandlersJS.YAKITokenMintERC20Token.Approval.handlerWithLoader as any;

export const YAKITokenMintERC20Token_Transfer_handler: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.YAKITokenMintERC20Token.Transfer.handler as any;

export const YAKITokenMintERC20Token_Transfer_contractRegister: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Transfer_eventFilter>> = HandlersJS.YAKITokenMintERC20Token.Transfer.contractRegister as any;

export const YAKITokenMintERC20Token_Transfer_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_YAKITokenMintERC20Token_Transfer_loader<loaderReturn>,Types_YAKITokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_YAKITokenMintERC20Token_Transfer_eventFilter>>) => void = HandlersJS.YAKITokenMintERC20Token.Transfer.handlerWithLoader as any;

export const WETHTokenMintERC20Token: { Transfer: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_WETHTokenMintERC20Token_Transfer_loader<loaderReturn>,Types_WETHTokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_WETHTokenMintERC20Token_Transfer_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Transfer_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Transfer_eventFilter>>
}; Approval: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_WETHTokenMintERC20Token_Approval_loader<loaderReturn>,Types_WETHTokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_WETHTokenMintERC20Token_Approval_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Approval_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_WETHTokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_WETHTokenMintERC20Token_Approval_eventFilter>>
} } = HandlersJS.WETHTokenMintERC20Token as any;

export const YAKITokenMintERC20Token: { Transfer: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_YAKITokenMintERC20Token_Transfer_loader<loaderReturn>,Types_YAKITokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_YAKITokenMintERC20Token_Transfer_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Transfer_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Transfer_eventFilter>>
}; Approval: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_YAKITokenMintERC20Token_Approval_loader<loaderReturn>,Types_YAKITokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_YAKITokenMintERC20Token_Approval_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Approval_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_YAKITokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_YAKITokenMintERC20Token_Approval_eventFilter>>
} } = HandlersJS.YAKITokenMintERC20Token as any;

export const CHOGTokenMintERC20Token: { Transfer: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_CHOGTokenMintERC20Token_Transfer_loader<loaderReturn>,Types_CHOGTokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_CHOGTokenMintERC20Token_Transfer_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Transfer_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Transfer_eventFilter>>
}; Approval: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_CHOGTokenMintERC20Token_Approval_loader<loaderReturn>,Types_CHOGTokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_CHOGTokenMintERC20Token_Approval_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Approval_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_CHOGTokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_CHOGTokenMintERC20Token_Approval_eventFilter>>
} } = HandlersJS.CHOGTokenMintERC20Token as any;

export const DAKTokenMintERC20Token: { Transfer: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_DAKTokenMintERC20Token_Transfer_loader<loaderReturn>,Types_DAKTokenMintERC20Token_Transfer_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_DAKTokenMintERC20Token_Transfer_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Transfer_handler<void>,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Transfer_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Transfer_contractRegister,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Transfer_eventFilter>>
}; Approval: {
  handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Types_DAKTokenMintERC20Token_Approval_loader<loaderReturn>,Types_DAKTokenMintERC20Token_Approval_handler<loaderReturn>,Types_SingleOrMultiple_t<Types_DAKTokenMintERC20Token_Approval_eventFilter>>) => void; 
  handler: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Approval_handler<void>,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Approval_eventFilter>>; 
  contractRegister: Types_fnWithEventConfig<Types_DAKTokenMintERC20Token_Approval_contractRegister,Types_HandlerTypes_eventConfig<Types_DAKTokenMintERC20Token_Approval_eventFilter>>
} } = HandlersJS.DAKTokenMintERC20Token as any;
